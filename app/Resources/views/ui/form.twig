{% macro button(title, options) %}{% spaceless %}
{% set options = {
    type: 'button',
    href: '',
    tag: 'button',
    mod: '',
    icon: '',
    name: '',
    value: '',
    disabled: false,
    attrs: {},
}|merge(options|default({})) %}
    {% set button_mods = '' %}
    {% if options.mod %}
        {% for mod in options.mod|split(' ') %}
            {% set button_mods = button_mods ~ (mod|first == '_' ? 'button'~ mod ~' ' : mod ~ ' ') %}
        {% endfor %}
    {% endif %}
    {% if options.href %}
        {% set options = options|merge({tag: 'a'}) %}
    {% elseif options.type == 'checkbox' or options.type == 'radio' %}
        {% set button_mods = button_mods ~ ' button_toggle' %}
        {% set options = options|merge({tag: 'label'}) %}
    {% endif %}
    <{{ options.tag }}
        {% for attrKey, attr in options.attrs %}
             {{ attrKey }}='{{ attr is iterable ? attr|json_encode|raw : attr|raw }}'
        {% endfor %}
        {% if options.disabled %}disabled{% endif %}
        {% if options.tag == 'button' %}type="{{ options.type }}"{% endif %}
        {% if options.tag == 'a' and options.href %}href="{{ options.href }}"{% endif %}
        {% if options.tag == 'a' and options.target %}target="{{ options.target }}"{% endif %}
        class="button {{ button_mods }}">
        {% if options.type == 'checkbox' or options.type == 'radio' %}
            <input {% if options.checked %}checked{% endif %} {% if options.value is not empty %}value="{{ options.value }}"{% endif %} type="{{ options.type }}" name="{{ options.name }}">
        {% endif %}
        <span class="button__content">
            {% if options.icon %}
                {% set icon_mod = '' %}
                {% for mod in options.icon|split(' ') %}
                    {% set icon_mod = icon_mod ~ (mod|first == '_' ? 'button__icon'~ mod ~' ' : mod) %}
                {% endfor %}
                <span class="button__icon {{ icon_mod }}"></span>
            {% endif %}
            <span class="button__title">
                <span class="button__title-text">{{ title|raw }}</span>
            </span>
        </span>
    </{{ options.tag }}>
{% endspaceless %}{% endmacro %}


{% macro input(input_options, options) %}{% spaceless %}
{% set input_options = input_options is iterable ? input_options : {title: input_options} %}
{% set input_options = {
    required: false,
    disabled: false,
    readonly: false,
    autocomplete: false,
    value: '',
    name: '',
    type: 'text',
    form: '',
    attrs: {},
    field_mod: '',
}|merge(input_options|default({})) %}
{% set options = {
    mod: '',
    attrs: {},
}|merge(options|default({})) %}
    {% set field_mods = '' %}
    {% set input_tag = input_options.type == 'textarea' ? 'textarea' : input_options.type == 'contenteditable' ? 'div' : 'input' %}
    {% if options.mod %}
        {% for mod in options.mod|split(' ') %}
            {% set field_mods = field_mods ~ (mod|first == '_' ? 'field'~ mod ~' ' : mod) %}
        {% endfor %}
    {% elseif input_options.field_mod %}
        {% for mod in input_options.field_mod|split(' ') %}
            {% set field_mods = field_mods ~ (mod|first == '_' ? 'field'~ mod ~' ' : mod) %}
        {% endfor %}
    {% endif %}
    {% if options.error %}
        {% set field_mods = field_mods ~ 'is-error ' %}
    {% endif %}
    <label js-inputShadow
        {% for attrKey, attr in options.attrs %}
             {{ attrKey }}='{{ attr is iterable ? attr|json_encode|raw : attr|raw }}'
        {% endfor %}
        class="field {{ field_mods }}">
        {% if input_options.title %}<span class="field__title">{{ input_options.title }}</span>{% endif %}
        <span class="field__main">
            <{{ input_tag }}
                {% for attrKey, attr in input_options.attrs %}
                     {{ attrKey }}='{{ attr is iterable ? attr|json_encode|raw : attr|raw }}'
                {% endfor %}
                {% if input_options.readonly %}readonly{% endif %}
                {% if input_options.disabled %}disabled{% endif %}
                {% if input_options.required %}required{% endif %}
                class="field__input"
                type="{{ input_options.type }}"
                {% if input_options.placeholder %}placeholder="{{ input_options.placeholder }}"{% endif %}
                {% if input_options.autocomplete %}autocomplete="{{ input_options.autocomplete }}"{% endif %}
                name="{{ input_options.name }}"
                {% if input_tag == 'textarea' %}
                    {% if input_options.rows %}rows="{{ input_options.rows }}"{% endif %}
                {% elseif input_tag == 'div' %}
                    contenteditable
                {% else %}
                    value="{{ input_options.value|raw }}"
                {% endif %}>{% if input_tag == 'textarea' or input_tag == 'div' %}{% spaceless %}
                    {{ input_options.value|raw }}
                {% endspaceless %}</{{ input_tag }}>
                {% endif %}

                {% if input_options.type == 'password' %}
                    <span js-password-visibility class="field__button field__button_password"></span>
                {% endif %}
        </span>
        {% if options.notify %}
            <span class="field__notify">{{ options.notify|raw }}</span>
        {% endif %}
        {% if options.error %}
            <span class="field__error">{{ options.error|raw }}</span>
        {% endif %}
    </label>
{% endspaceless %}{% endmacro %}

{% macro textarea(input_options, options) %}
    {% from _self import input %}
    {{ input(input_options|merge({type: 'textarea'}), options) }}
{% endmacro %}


{% macro toggle(input_options, options) %}{% spaceless %}
{% set input_options = input_options is iterable ? input_options : {title: input_options} %}
{% set input_options = {
    required: false,
    value: '',
    name: '',
    type: 'checkbox',
    form: '',
    attrs: {},
}|merge(input_options|default({})) %}
{% set options = {
    attrs: {},
    mod: '',
}|merge(options|default({})) %}
    {% set field_mods = '' %}
    {% if options.mod %}
        {% for mod in options.mod|split(' ') %}
            {% set field_mods = field_mods ~ (mod|first == '_' ? 'toggle'~ mod ~' ' : mod) %}
        {% endfor %}
    {% endif %}
    <label js-inputShadow
        {% for attrKey, attr in options.attrs %}
            {{ attrKey }}='{{ attr is iterable ? attr|json_encode|raw : attr|raw }}'
        {% endfor %}
        class="toggle {{ field_mods }}">

        <input
            {% for attrKey, attr in input_options.attrs %}
                {{ attrKey }}='{{ attr is iterable ? attr|json_encode|raw : attr|raw }}'
            {% endfor %}
            {% if input_options.value %}value='{{ input_options.value }}'{% endif %}
            {% if input_options.checked %}checked{% endif %}
            {% if input_options.required %}required{% endif %}
            {% if input_options.disabled %}disabled{% endif %}
            class="toggle__input"
            type="{{ input_options.type }}"
            name="{{ input_options.name }}"
            >
        <span class="toggle__fake"></span>
        <span class="toggle__main">
            <span class="toggle__title">{{ input_options.title|raw }}</span>
            {% if options.description %}
                <span class="toggle__description">{{ options.description|raw }}</span>
            {% endif %}
        </span>
        {% if options.error %}
            <span class="toggle__error">{{ options.error|raw }}</span>
        {% endif %}
    </label>
{% endspaceless %}{% endmacro %}

{% macro checkbox(input_options, options) %}
    {% from _self import toggle %}
    {% set input_options = input_options is iterable ? input_options : {title: input_options} %}
    {{ toggle(input_options|merge({type: 'checkbox'}), options) }}
{% endmacro %}
{% macro radio(input_options, options) %}
    {% from _self import toggle %}
    {% set input_options = input_options is iterable ? input_options : {title: input_options} %}
    {{ toggle(input_options|merge({type: 'radio'}), options) }}
{% endmacro %}



{% macro datepicker(input_options, options) %}
    {% from _self import input %}
    {% set input_options = input_options is iterable ? input_options : {value: input_options} %}
    {{ input(input_options|default({})|merge({readonly: true}), options|default({})|merge({
        attrs: {
            'js-inputDate': '',
        }|merge(options.attrs),
        mod: options.mod ~ ' _datepicker',
    })) }}
{% endmacro %}
